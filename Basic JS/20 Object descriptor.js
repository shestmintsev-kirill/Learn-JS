const car = {
  brand: 'Audi',
  year: 2019,
};
//! метод Object.defineProperty определить настройки для объекта и конкретного сво-ва (объект, определяем новое/текущее св-во, {объект дескриптор имеющий настройки(по дефолту все true)})
Object.defineProperty(car, 'age', {
  configurable: false, //!запрещает конфигурировать св-во, но я могу его перезаписать
  enumerable: false, //! делает св-во не итерируемым
  writable: false, //! запрещает запись/перезапись св-ва
  //! Гетер позволяет скрыть логику, гетер является функцией, но использовать будем его как св-во(т.е. без вызова напрямую метода)
  get: function() {
    return `Мышина выпущена в ${this.year}`;
  },
});
//! так же можно использовать гетер не только через Object.defineProperty
const car = {
  brand: 'Audi',
  year: 2019,
  get age() {
    return `Мышина выпущена в ${this.year}`;
  },
  set age(value) {      //! так же есть Сетер, если переопределять это св-во(car.age = 2020), будет переопределено year в объекте
    this.year = value;
  },
}; //! сетеры и Гетеры дают возможность контролировать взаимодействие с каким-либо св-ом, Гетеры и Сетеры при копировании в новый объект не попадут


Object.defineProperty(window, 'globalVar', {
  set: function(value) {
    console.log(value);
    debugger; //! через это св-во можно найти откуда было изменение данного св-во(лайф=хак для поиска ошибки)
  },
});

function foo() {
  globalVar = 10;
}

foo();
